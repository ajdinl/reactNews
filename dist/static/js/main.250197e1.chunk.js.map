{"version":3,"sources":["components/layout/SingInLinks.js","store/actions/authActions.js","components/layout/SingOutLinks.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/SignUp.js","store/actions/projectActions.js","components/projects/CreateProject.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","getFirebase","auth","then","type","props","className","to","onClick","profile","initials","SingedOutLinks","state","console","log","firebase","links","uid","Notifications","notifications","map","notification","key","id","user","content","moment","time","toDate","fromNow","ProjectSummary","project","title","authorFirstName","authorLastName","createdAt","calendar","ProjectList","projects","compose","firestore","ordered","firestoreConnect","collection","limit","orderBy","ownProps","match","params","data","authError","signIn","creds","credentials","signInWithEmailAndPassword","email","password","catch","err","useState","userLogin","setUserLogin","handleChange","e","target","value","onSubmit","preventDefault","htmlFor","onChange","signUp","newUser","getFirestore","createUserWithEmailAndPassword","resp","doc","set","firstName","lastName","setNewUser","createProject","authorId","add","Date","setProject","history","push","App","exact","path","component","Dashboard","ProjectDetails","SignIn","SignUp","CreateProject","Boolean","window","location","hostname","initState","authReducer","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","userProfile","useFirestoreForProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.250197e1.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/authActions'\n\nconst SingedInLinks = (props) => {\n  return (\n    <ul className='right'>\n      <li><NavLink to='/create'>Add new</NavLink></li>\n      <li><a onClick={props.signOut}>Log Out</a></li>\n      <li><NavLink to='/' className='btn btn-floating blue lighten-1'>\n          {props.profile.initials}\n        </NavLink></li>\n    </ul>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SingedInLinks)\n","export const signIn = (credentials) => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase()\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password\n    ).then(() => {\n      dispatch({ type: 'LOGGIN_SUCCESS' })\n    }).catch((err) => {\n      dispatch({ type: 'LOGGIN_ERROR', err })\n    })\n  }\n}\n\nexport const signOut = () => {\n  return (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase()\n    firebase.auth().signOut().then(() => {\n      dispatch({ type: 'SIGNOUT_SUCCESS' })\n    })\n  }\n}\n\nexport const signUp = (newUser) => {\n  return (dispatch, getState, {getFirebase, getFirestore}) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    firebase.auth().createUserWithEmailAndPassword(\n      newUser.email,\n      newUser.password\n    ).then((resp) => {\n      return firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      })\n    }).then(() => {\n      dispatch({type: 'SIGNUP_SUCCESS'})\n    }).catch(err => {\n      dispatch({type: 'SIGNUP_ERROR', err})\n    })\n  }\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst SingedOutLinks = () => {\n  return (\n    <ul className='right'>\n      <li><NavLink to='/signup'>Signup</NavLink></li>\n      <li><NavLink to='/signin'>Login</NavLink></li>\n    </ul>\n  )\n}\n\nexport default SingedOutLinks\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport SingedInLinks from './SingInLinks'\nimport SingedOutLinks from './SingOutLinks'\nimport { connect } from 'react-redux'\n\nconst Navbar = (props) => {\n  const { auth, profile } = props\n  const links = auth.uid ? <SingedInLinks profile={profile} /> : <SingedOutLinks />\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className='container'>\n        <Link to='/' className='brand-logo'>React News</Link>\n        { links }\n      </div>\n    </nav>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar)\n","import React from 'react'\nimport moment from 'moment'\n\nconst Notifications = (props) => {\n  const {notifications} = props\n  return (\n    <div className='section'>\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">Notifications</span>\n          <ul className='notifications'>\n            {notifications && notifications.map(notification => {\n              return (\n                <li key={notification.id} >\n                  <span className=\"blue-text\">{notification.user} </span>\n                  <span>{notification.content}</span>\n                  <div className=\"grey-text note-date\">\n                    {moment(notification.time.toDate()).fromNow()}\n                  </div>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notifications\n","import React from 'react'\nimport moment from 'moment'\n\nconst ProjectSummary = ({project}) => {\n  return (\n    <div className=\"card z-depth-0 project-summary\">\n      <div className=\"card-container grey-text text-darken-3\">\n        <span className=\"card-title\">{project.title}</span>\n        <p>Posted by {project.authorFirstName} {project.authorLastName}</p>\n        <p className=\"grey-text\">{moment(project.createdAt.toDate()).calendar()}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectSummary\n","import React from 'react'\nimport ProjectSummary from './ProjectSummary';\nimport { Link } from 'react-router-dom'\n\nconst ProjectList = ({projects}) => {\n  return (  \n    <div className=\"project-list section\">\n      {projects && projects.map(project => {\n        return (\n          <Link to={'/project/' + project.id} key={project.id}>\n          <ProjectSummary project={project} />\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default ProjectList\n","import React from 'react'\nimport Notifications from './Notifications'\nimport ProjectList from '../projects/ProjectList'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\n\nconst Dashboard = (props) => {\n  const { projects, auth ,notifications } = props\n  if(!auth.uid) return <Redirect to='/signin'/>\n  \n  return (\n    <div className=\"dashboard container\">\n      <div className=\"row\">\n        <div className=\"col s12 m6\">\n          <ProjectList projects={projects}/>\n        </div>\n        <div className=\"col s12 m5 offset-m1\">\n          <Notifications notifications={notifications}/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    projects: state.firestore.ordered.projects,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'notifications', limit:3, orderBy: ['time', 'desc'] },\n    { collection: 'projects', orderBy: ['createdAt', 'desc']}\n  ])\n)(Dashboard)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { firestoreConnect } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport { Redirect } from 'react-router-dom'\nimport moment from 'moment'\n\nconst ProjectDetails = (props) => {\n  const { project, auth } = props\n  if(!auth.uid) return <Redirect to='/signin' />\n  if (project) {\n    return (\n      <div className=\"container section project-details\">\n        <div className=\"card z-depth-0\">\n          <div className=\"card-content\">\n            <span className=\"card-title\">{project.title}</span>\n            <p>{project.content}</p>\n          </div>\n          <div className=\"card-action gret lighten-4 grey-text\">\n            <div>Posted by {project.authorFirstName} {project.authorLastName}</div>\n            <div>{moment(project.createdAt.toDate()).calendar()}</div>\n          </div>\n        </div>\n      </div>\n    )\n  } else { \n    return (\n      <div className=\"container center\">\n        <p>Loading ...</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state,ownProps) => {\n  const id = ownProps.match.params.id\n  const projects = state.firestore.data.projects\n  const project = projects ? projects[id] : null\n  return {\n    project: project,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([{\n    collection: 'projects'\n  }])\n)(ProjectDetails)","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../../store/actions/authActions' \nimport { Redirect } from 'react-router-dom'\n\nconst SignIn = (props) => {\n  const [userLogin, setUserLogin] = useState({\n    email: '',\n    password: ''\n  })\n  const handleChange = (e) => {\n    setUserLogin({...userLogin,\n      [e.target.id]:e.target.value\n    })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.signIn(userLogin)\n  }\n  const { auth, authError } = props\n  if(auth.uid) return <Redirect to='/' />\n\n  return (\n    <div className='container'>\n      <form className='white' onSubmit={handleSubmit}>\n        <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n        <div className=\"input-field\">\n          <label htmlFor='email'>Email</label>\n          <input type='email' id='email' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor='password'>Password</label>\n          <input type='password' id='password' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <button className='btn blue lighten-1 z-depth-0'>Login</button>\n          <div className=\"red-text center\">\n            { authError ? <p>{ authError }</p> : null }\n          </div>\n        </div>\n      </form>      \n    </div>\n    )\n  }\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\n","import React, { useState } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signUp } from '../../store/actions/authActions'\n\nconst SignUp = (props) => {\n  const [newUser, setNewUser] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  })\n  const handleChange = (e) => {\n    setNewUser({...newUser,\n      [e.target.id]:e.target.value\n    })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.signUp(newUser)\n  }\n  const { auth, authError } = props\n  if(auth.uid) return <Redirect to='/' />\n  return (\n    <div className='container'>\n      <form onSubmit={handleSubmit} className='white'>\n        <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n        <div className=\"input-field\">\n          <label htmlFor='email'>Email</label>\n          <input type='email' id='email' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor='password'>Password</label>\n          <input type='password' id='password' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor='firstName'>First Name</label>\n          <input type='text' id='firstName' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor='lastName'>Last Name</label>\n          <input type='text' id='lastName' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <button className='btn blue lighten-1 z-depth-0'>Create</button>\n          <div className=\"red-text center\">\n            { authError ? <p>{ authError }</p> : null }\n          </div>\n        </div>\n      </form>\n    </div>\n    )\n  }\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\n","export const createProject = (project) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile\n    const authorId = getState().firebase.auth.uid\n    firestore.collection('projects').add({\n      ...project,\n      authorFirstName: profile.firstName,\n      authorLastName: profile.lastName,\n      authorId: authorId,\n      createdAt: new Date()\n    }).then(() => { \n      dispatch({type: 'CREATE_PROJECT', project })\n    }).catch((err) => {\n      dispatch({type: 'CREATE_PROJECT_ERROR', err})\n    }) \n  }\n}","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { createProject } from '../../store/actions/projectActions'\nimport { Redirect } from 'react-router-dom'\n\nconst CreateProject = (props) => {\n  const [project, setProject] = useState({\n    title: '',\n    content: ''\n  })\n  const handleChange = (e) => {\n    setProject({...project,\n      [e.target.id]:e.target.value\n    })\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    props.createProject(project)\n    props.history.push('/')\n  }\n  const { auth } = props\n  if(!auth.uid) return <Redirect to='/signin' />\n  return (\n    <div className='container'>\n      <form onSubmit={handleSubmit} className='white'>\n        <h5 className=\"grey-text text-darken-3\">Create new, react news</h5>\n        <div className=\"input-field\">\n          <label htmlFor='title'>Title</label>\n          <input type='text' id='title' onChange={handleChange}/>\n        </div>\n        <div className=\"input-field\">\n          <label htmlFor='content'>Content</label>\n          <textarea id=\"content\" className=\"materialize-textarea\" onChange={handleChange}></textarea>\n        </div>\n        <div className=\"input-field\">\n          <button className='btn blue lighten-1 z-depth-0'>Create</button>\n        </div>\n      </form>      \n    </div>\n    )\n  }\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createProject: (project) => dispatch(createProject(project))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard'\nimport ProjectDetails from './components/projects/ProjectDetails'\nimport SignIn from './components/auth/SignIn'\nimport SignUp from './components/auth/SignUp'\nimport CreateProject from './components/projects/CreateProject'\n\nconst App = () => {\n\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard}/>\n          <Route path='/project/:id' component={ProjectDetails} />\n          <Route path='/signin' component={SignIn} />\n          <Route path='/signup' component={SignUp} />   \n          <Route path='/create' component={CreateProject} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'LOGIN_ERROR':\n      return {\n        ...state,\n        authError: 'Login failed'\n      }\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNOUT_SUCCRESS':\n      return state\n    case 'SIGNUP_SUCCESS':\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNUP_ERROR':\n      return {\n        ...state,\n        authError: action.err.message\n      }\n    default:\n      return state\n  }\n}\n\nexport default authReducer","const initState = {\n  projects: [\n    {id: 1, title: 'some Title', content: 'dummy data Content'},\n    {id: 2, title: 'some Title', content: 'dummy data Content'},\n    {id: 3, title: 'some Title', content: 'dummy data Content'}\n  ]\n}\n\nconst projectReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CREATE_PROJECT':\n      console.log('created project', action.project)\n      return state\n    case 'CREATE_PROJECT_ERROR':\n      console.log('created project error', action.err)\n      return state\n    default:\n      return state\n  }\n}\n\nexport default projectReducer","import authReducer from './authReducer'\nimport projectReducer from './projectReducer'\nimport { combineReducers } from 'redux'\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  project: projectReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer\n})\n\nexport default rootReducer","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n  apiKey: \"AIzaSyAGrqsVJJXd3bDudMHg6l8f4C92cmrpg44\",\n  authDomain: \"react-news-suggestions.firebaseapp.com\",\n  databaseURL: \"https://react-news-suggestions.firebaseio.com\",\n  projectId: \"react-news-suggestions\",\n  storageBucket: \"\",\n  messagingSenderId: \"103980352293\",\n  appId: \"1:103980352293:web:c27e704745a8146b\"\n};\nfirebase.initializeApp(config)\nfirebase.firestore()\n\nexport default firebase","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore'\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport fbConfig from './config/fbConfig'\n\nconst store = createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    reduxFirestore(fbConfig),\n    reactReduxFirebase(fbConfig, {userProfile: 'users', useFirestoreForProfile: true, attachAuthIsReady: true})\n  )\n)\nstore.firebaseAuthIsReady.then(() => {\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\nserviceWorker.unregister()\n})"],"sourceRoot":""}